name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published
env:
  CIBW_BUILD_VERBOSITY: 3
  #CIBW_TEST_COMMAND: python -m unittest discover {project}/tests
  # Disable building PyPy wheels on all platforms
  CIBW_SKIP: pp*

jobs:
  # build_wheels:
  #   name: Build wheels for ${{ matrix.python }}-${{ matrix.buildplat[1] }}
  #   runs-on: ${{ matrix.buildplat[0] }}
  #   strategy:
  #     # Ensure that a wheel builder finishes even if another fails
  #     fail-fast: false
  #     matrix:
  #       buildplat:
  #       - [ubuntu-latest, manylinux_x86_64, auto]
  #       - [macos-latest, macosx_x86_64, x86_64]
  #       # skip these for now, need more work
  #       - [macos-latest, macosx_arm64, arm64]
  #       # python: ["cp38", "cp39", "cp310", "cp311", "cp312"]
  #       python: ["cp312"]

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #           submodules: 'true'

  #     - name: Build wheels
  #       uses: pypa/cibuildwheel@v2.15.0
  #       env:
  #         CIBW_ARCHS: ${{ matrix.buildplat[2] }}
  #         CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
            submodules: 'true'

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    # needs: [build_wheels, build_sdist]
    needs: [build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
